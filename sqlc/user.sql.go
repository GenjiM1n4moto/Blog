// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  email,
  nickname
) VALUES (
  $1, $2, $3, $4
) RETURNING username, hashed_password, password_changedat, email, nickname, create_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
	Nickname       string `json:"nickname"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.Email,
		arg.Nickname,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.PasswordChangedat,
		&i.Email,
		&i.Nickname,
		&i.CreateAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUserByemail = `-- name: GetUserByemail :one
SELECT username, hashed_password, password_changedat, email, nickname, create_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByemail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByemail, email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.PasswordChangedat,
		&i.Email,
		&i.Nickname,
		&i.CreateAt,
	)
	return i, err
}

const getUserBynickname = `-- name: GetUserBynickname :one
SELECT username, hashed_password, password_changedat, email, nickname, create_at FROM users
WHERE nickname = $1 LIMIT 1
`

func (q *Queries) GetUserBynickname(ctx context.Context, nickname string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserBynickname, nickname)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.PasswordChangedat,
		&i.Email,
		&i.Nickname,
		&i.CreateAt,
	)
	return i, err
}

const getUserByusername = `-- name: GetUserByusername :one
SELECT username, hashed_password, password_changedat, email, nickname, create_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByusername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByusername, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.PasswordChangedat,
		&i.Email,
		&i.Nickname,
		&i.CreateAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT username, hashed_password, password_changedat, email, nickname, create_at FROM users
WHERE username = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.PasswordChangedat,
		&i.Email,
		&i.Nickname,
		&i.CreateAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, hashed_password, password_changedat, email, nickname, create_at FROM users
ORDER BY create_at
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.HashedPassword,
			&i.PasswordChangedat,
			&i.Email,
			&i.Nickname,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmail = `-- name: UpdateEmail :one
UPDATE users
set email = $2
WHERE username = $1
RETURNING username, hashed_password, password_changedat, email, nickname, create_at
`

type UpdateEmailParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateEmail, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.PasswordChangedat,
		&i.Email,
		&i.Nickname,
		&i.CreateAt,
	)
	return i, err
}

const updateNickname = `-- name: UpdateNickname :one
UPDATE users
set nickname = $2
WHERE username = $1
RETURNING username, hashed_password, password_changedat, email, nickname, create_at
`

type UpdateNicknameParams struct {
	Username string `json:"username"`
	Nickname string `json:"nickname"`
}

func (q *Queries) UpdateNickname(ctx context.Context, arg UpdateNicknameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateNickname, arg.Username, arg.Nickname)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.PasswordChangedat,
		&i.Email,
		&i.Nickname,
		&i.CreateAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE users
set hashed_password = $2
WHERE username = $1
RETURNING username, hashed_password, password_changedat, email, nickname, create_at
`

type UpdatePasswordParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updatePassword, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.PasswordChangedat,
		&i.Email,
		&i.Nickname,
		&i.CreateAt,
	)
	return i, err
}
